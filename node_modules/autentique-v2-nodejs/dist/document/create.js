'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs = _interopRequireDefault(require("fs"));

var _axios = _interopRequireDefault(require("axios"));

var _path = _interopRequireDefault(require("path"));

var _formData = _interopRequireDefault(require("form-data"));

var _Api = _interopRequireDefault(require("../common/Api"));

var _utils = _interopRequireDefault(require("../common/utils"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var create = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (_ref, _ref2) {
    var {
      token,
      sandbox = false
    } = _ref;
    var {
      document,
      signers,
      file
    } = _ref2;

    try {
      var variables = {
        document,
        signers,
        file: null
      };
      var filename = "".concat(__dirname, "/../resources/documents/create.graphql");

      var operations = _fs.default.readFileSync(filename).toString().replace(/[\n\r]/gi, '').replace('$variables', JSON.stringify(variables)).replace('$sandbox', sandbox.toString());

      var buffer = yield _axios.default.get(file, {
        responseType: 'arraybuffer'
      });
      var formData = new _formData.default();
      formData.append('operations', _utils.default.query(operations));
      formData.append('map', '{"file": ["variables.file"]}');
      formData.append('file', Buffer.from(buffer.data), {
        filename: _path.default.basename(file),
        contentType: 'application/octet-stream',
        mimeType: 'application/octet-stream'
      });
      var response = yield (0, _Api.default)(token).post('/graphql', formData, {
        processData: false,
        withCredentials: true,
        cache: false,
        timeout: 180000,
        headers: _objectSpread(_objectSpread({}, formData.getHeaders()), {}, {
          enctype: 'multipart/form-data',
          'content-type': "multipart/form-data; boundary=".concat(formData._boundary),
          Accept: 'application/json'
        })
      });
      return response && response.data;
    } catch (error) {
      console.log(error);
    }
  });

  return function create(_x, _x2) {
    return _ref3.apply(this, arguments);
  };
}();

exports.create = create;